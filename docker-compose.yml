################################
#      OCR Microservices       #
################################

# Start messaging broker
rabbitmq:
  build: ./sonrasc-image-processing/
  dockerfile: Dockerfile-rabbitmq
  dns: ["8.8.8.8"]
  environment:
    - "RABBITMQ_PASS=test"

# Start transformation worker
strokewidthtransform:
  build: ./sonrasc-image-processing/
  dockerfile: Dockerfile-open-ocr-preprocessor
  volumes:
    - ./sonrasc-image-processing/scripts/:/opt/open-ocr/
  dns: ["8.8.8.8"]
  links:
    - rabbitmq
  command: "bash /opt/open-ocr/open-ocr-preprocessor.sh -amqp_uri amqp://admin:test@rabbitmq/ -preprocessor stroke-width-transform"

# Start OCR worker
openocrworker:
  build: ./sonrasc-image-processing/
  dockerfile: Dockerfile-open-ocr
  volumes:
    - ./sonrasc-image-processing/scripts/:/opt/open-ocr/
  dns: ["8.8.8.8"]
  links:
    - rabbitmq
  command: "bash /opt/open-ocr/open-ocr-worker.sh -amqp_uri amqp://admin:test@rabbitmq/"

# Start http server
openocr:
  build: ./sonrasc-image-processing/
  dockerfile: Dockerfile-open-ocr
  dns: ["8.8.8.8"]
  volumes:
    - ./sonrasc-image-processing/scripts/:/opt/open-ocr/
  links:
    - rabbitmq
  ports:
    - "9292:9292"
  command: "bash /opt/open-ocr/open-ocr-httpd.sh -amqp_uri amqp://admin:test@rabbitmq/ -http_port 9292"

# Frontend client.
web-front:
  build: ./sonrasc-front/
  dockerfile: Dockerfile
  volumes:
    - "./sonrasc-front/:/src/"
    - /src/node_modules
  ports:
    - "8080:8080"

web_api:
  build: ./sonrasc-api/
  dockerfile: Dockerfile
  volumes:
    - "./sonrasc-api/:/src/"
    - /src/node_modules
  ports:
    - "9922:9922"
  command: "npm run start"
